  # Indices settings
Indices:
    # the name of the index to be created, existing indices with same name will be deleted
  - index_name: cases
    # index type, this index is initialized with a neo4j cypher query
    type: neo4j
    # type mapping for each property of the index
    mapping:
      case_id:
        type: keyword
      disease_type:
        type: keyword
      case_report_form_submitted:
        type: keyword
      in_analysis:
        type: keyword
      lost_to_follow_up:
        type: keyword
      consent_type:
        type: keyword
      primary_site:
        type: keyword
      consent_withdrawn:
        type: keyword
      disease_subtype:
        type: keyword
      study_subject_source_id:
        type: keyword
      taxon:
        type: keyword
      status:
        type: keyword
      program:
        type: keyword
      program_id:
        type: keyword
      study_acronym:
        type: keyword
      study:
        type: keyword
      study_description:
        type: keyword
      file_types:
        type: keyword
      file_ids:
        type: keyword
      sample_ids:
        type: keyword
      tissue_types:
        type: keyword
      sample_compositions:
        type: keyword
    # a list of the queries that are used to initialize the index
    cypher_queries:
        # the cypher query used for initialization
      - query: |
          MATCH (ss:study_subject)
          WITH ss, {
              case_id: ss.study_subject_id,
              disease_type: ss.disease_type,
              case_report_form_submitted: ss.case_report_form_submitted,
              in_analysis: ss.in_analysis,
              lost_to_follow_up: ss.lost_to_follow_up,
              consent_type: ss.consent_type,
              primary_site: ss.primary_site,
              consent_withdrawn: ss.consent_withdrawn,
              disease_subtype: ss.disease_subtype,
              study_subject_source_id: ss.study_subject_source_id,
              taxon: ss.taxon,
              status: ss.status
          } AS opensearch_data
          SKIP $skip LIMIT $limit
          OPTIONAL MATCH (ss)-->(:study)-->(p:program)
          WITH ss, apoc.map.merge(opensearch_data, {
              program: p.program_acronym,
              program_id: p.program_id
          }) AS opensearch_data
          OPTIONAL MATCH (ss)-->(s:study)
          WITH ss, apoc.map.merge(opensearch_data, {
              study_acronym: s.study_acronym,
              study: s.study_name,
              study_description: s.study_short_description
          }) AS opensearch_data
          OPTIONAL MATCH (ss)<-[*..2]-()<--(f:file)
          WITH ss, apoc.map.merge(opensearch_data, {
              file_types: COLLECT(DISTINCT f.file_type),
              file_ids: COLLECT(DISTINCT f.file_id)
          }) AS opensearch_data
          OPTIONAL MATCH (ss)<--(samp:sample)
          WITH ss, apoc.map.merge(opensearch_data, {
              sample_ids: COLLECT(DISTINCT samp.sample_id),
              tissue_types: COLLECT(DISTINCT samp.tissue_type),
              sample_compositions: COLLECT(DISTINCT samp.composition)
          }) AS opensearch_data
          RETURN opensearch_data
        # the page size used if this query has pagination variables
        page_size: 10000
  - index_name: about_page
    type: about_file
    # type mapping for each property of the index
    mapping:
      page:
        type: keyword
      title:
        type: keyword
      primaryContentImage:
        type: text
      content:
        type: object
  - index_name: model_nodes
    type: model
    subtype: node
    # type mapping for each property of the index
    mapping:
      node:
        type: keyword
      node_kw:
        type: keyword
  - index_name: model_properties
    type: model
    subtype: property
    # type mapping for each property of the index
    mapping:
      node:
        type: keyword
      property:
        type: keyword
      property_kw:
        type: keyword
      property_description:
        type: keyword
      property_required:
        type: keyword
      property_type:
        type: keyword
  - index_name: model_values
    type: model
    subtype: value
    # type mapping for each property of the index
    mapping:
      node:
        type: keyword
      property:
        type: keyword
      property_description:
        type: keyword
      property_required:
        type: keyword
      property_type:
        type: keyword
      value:
        type: keyword
      value_kw:
        type: keyword
