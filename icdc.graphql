type adverse_event {
  ae_dose: Float
  ae_dose_unit: String
  ae_dose_original: Float
  ae_dose_original_unit: String
  ae_agent_name: String
  day_in_cycle: Int
  date_resolved: String
  adverse_event_term: String
  adverse_event_description: String
  adverse_event_grade: String
  adverse_event_grade_description: String
  attribution_to_research: String
  attribution_to_ind: String
  attribution_to_disease: String
  attribution_to_commercial: String
  attribution_to_other: String
  ae_other: String
  dose_limiting_toxicity: String
  unexpected_adverse_event: String
  crf_id: String
  agent: agent @relation(name:"of_agent", direction:OUT)
  cases: [case] @relation(name:"had_adverse_event", direction:IN)
  visit: visit @relation(name:"on_visit", direction:OUT)
  next_adverse_event: adverse_event @relation(name:"next", direction:OUT)
  prior_adverse_event: adverse_event @relation(name:"next", direction:IN)
}

type agent {
  medication: String
  document_number: String
  study_arms: [study_arm] @relation(name:"of_study_arm", direction:OUT)
  agent_administrations: [agent_administration] @relation(name:"of_agent", direction:IN)
  adverse_events: [adverse_event] @relation(name:"of_agent", direction:IN)
}

type agent_administration {
  document_number: String
  medication: String
  route_of_administration: String
  medication_lot_number: String
  medication_vial_id: String
  medication_actual_units_of_measure: String
  medication_duration: Float
  medication_duration_unit: String
  medication_duration_original: Float
  medication_duration_original_unit: String
  medication_units_of_measure: String
  medication_actual_dose: Float
  medication_actual_dose_unit: String
  medication_actual_dose_original: Float
  medication_actual_dose_original_unit: String
  phase: String
  start_time: String
  stop_time: String
  dose_level: Float
  dose_level_unit: String
  dose_level_original: Float
  dose_level_original_unit: String
  dose_units_of_measure: String
  date_of_missed_dose: String
  medication_missed_dose: String
  missed_dose_amount: Float
  missed_dose_amount_unit: String
  missed_dose_amount_original: Float
  missed_dose_amount_original_unit: String
  missed_dose_units_of_measure: String
  medication_course_number: String
  comment: String
  crf_id: String
  agent: agent @relation(name:"of_agent", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type assay {
  sample: sample @relation(name:"of_sample", direction:OUT)
  files: [file] @relation(name:"of_assay", direction:IN)
  images: [image] @relation(name:"of_assay", direction:IN)
}

type case {
  case_id: String
  patient_id: String
  patient_first_name: String
  crf_id: String
  cohort: cohort @relation(name:"member_of", direction:OUT)
  study: study @relation(name:"member_of", direction:OUT)
  enrollment: enrollment @relation(name:"of_case", direction:IN)
  demographic: demographic @relation(name:"of_case", direction:IN)
  diagnoses: [diagnosis] @relation(name:"of_case", direction:IN)
  cycles: [cycle] @relation(name:"of_case", direction:IN)
  follow_ups: [follow_up] @relation(name:"of_case", direction:IN)
  samples: [sample] @relation(name:"of_case", direction:IN)
  visits: [visit] @relation(name:"of_case", direction:IN)
  adverse_event: adverse_event @relation(name:"had_adverse_event", direction:OUT)
  off_study: off_study @relation(name:"went_off_study", direction:OUT)
  off_treatment: off_treatment @relation(name:"went_off_treatment", direction:OUT)
}

type cohort {
  cohort_description: String
  cohort_dose: String
  cases: [case] @relation(name:"member_of", direction:IN)
  study_arm: study_arm @relation(name:"member_of", direction:OUT)
  study: study @relation(name:"member_of", direction:OUT)
}

type cycle {
  cycle_number: Int
  date_of_cycle_start: String
  date_of_cycle_end: String
  case: case @relation(name:"of_case", direction:OUT)
  visits: [visit] @relation(name:"of_cycle", direction:IN)
}

type demographic {
  breed: String
  patient_age_at_enrollment: Float
  patient_age_at_enrollment_unit: String
  patient_age_at_enrollment_original: Float
  patient_age_at_enrollment_original_unit: String
  date_of_birth: String
  sex: String
  weight: String
  neutered_indicator: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
}

type diagnosis {
  disease_term: String
  primary_disease_site: String
  stage_of_disease: String
  date_of_diagnosis: String
  histology_cytopathology: String
  date_of_histology_confirmation: String
  histological_grade: String
  pathology_report: Boolean
  treatment_data: Boolean
  follow_up_data: Boolean
  concurrent_disease: Boolean
  concurrent_disease_type: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
  files: [file] @relation(name:"from_diagnosis", direction:IN)
}

type disease_extent {
  crf_id: String
  lesion_number: String
  lesion_site: String
  lesion_description: String
  previously_irradiated: String
  previously_treated: String
  measurable_lesion: String
  target_lesion: String
  date_of_evaluation: String
  measured_how: String
  longest_measurement: String
  evaluation_number: String
  evaluation_code: String
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type enrollment {
  date_of_registration: String
  registering_institution: String
  initials: String
  date_of_informed_consent: String
  site_short_name: String
  veterinary_medical_center: String
  enrollment_document_number: String
  cohort_description: String
  patient_subgroup: String
  case: case @relation(name:"of_case", direction:OUT)
  prior_therapies: [prior_therapy] @relation(name:"at_enrollment", direction:IN)
  prior_surgeries: [prior_surgery] @relation(name:"at_enrollment", direction:IN)
  physical_exams: [physical_exam] @relation(name:"at_enrollment", direction:IN)
}

type file {
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_status: String
  uuid: String
  file_locations: String
  sample: sample @relation(name:"of_sample", direction:OUT)
  assay: assay @relation(name:"of_assay", direction:OUT)
  diagnosis: diagnosis @relation(name:"from_diagnosis", direction:OUT)
}

type follow_up {
  document_number: String
  date_of_last_contact: String
  patient_status: String
  explain_unknown_status: String
  contact_type: String
  treatment_since_last_contact: Boolean
  physical_exam_performed: Boolean
  physical_exam_changes: String
  crf_id: String
  case: case @relation(name:"of_case", direction:OUT)
}

type image {
  assay: assay @relation(name:"of_assay", direction:OUT)
}

type lab_exam {
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type off_study {
  document_number: String
  date_off_study: String
  reason_off_study: String
  date_of_disease_progression: String
  date_off_treatment: String
  best_resp_vet_tx_tp_secondary_response: String
  date_last_medication_administration: String
  best_resp_vet_tx_tp_best_response: String
  date_of_best_response: String
  case: case @relation(name:"went_off_study", direction:IN)
}

type off_treatment {
  document_number: String
  date_off_treatment: String
  reason_off_treatment: String
  date_of_disease_progression: String
  best_resp_vet_tx_tp_secondary_response: String
  date_last_medication_administration: String
  best_resp_vet_tx_tp_best_response: String
  date_of_best_response: String
  case: case @relation(name:"went_off_treatment", direction:IN)
}

type physical_exam {
  date_of_examination: String
  day_in_cycle: Int
  body_system: String
  pe_finding: String
  pe_comment: String
  phase_pe: String
  assessment_timepoint: String
  crf_id: String
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
}

type principal_investigator {
  pi_first_name: String
  pi_last_name: String
  pi_middle_initial: String
  studies: [study] @relation(name:"of_study", direction:OUT)
}

type prior_surgery {
  date_of_surgery: String
  procedure: String
  anatomical_site_of_surgery: String
  surgical_finding: String
  residual_disease: String
  therapeutic_indicator: String
  crf_id: String
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  next_prior_surgery: prior_surgery @relation(name:"next", direction:OUT)
  prior_prior_surgery: prior_surgery @relation(name:"next", direction:IN)
}

type prior_therapy {
  date_of_first_dose: String
  date_of_last_dose: String
  agent_name: String
  dose_schedule: String
  total_dose: Float
  total_dose_unit: String
  total_dose_original: Float
  total_dose_original_unit: String
  agent_units_of_measure: String
  best_response: String
  nonresponse_therapy_type: String
  prior_therapy_type: String
  prior_steroid_exposure: Boolean
  number_of_prior_regimens_steroid: Int
  total_number_of_doses_steroid: Int
  date_of_last_dose_steroid: String
  prior_nsaid_exposure: Boolean
  number_of_prior_regimens_nsaid: Int
  total_number_of_doses_nsaid: Int
  date_of_last_dose_nsaid: String
  tx_loc_geo_loc_ind_nsaid: String
  min_rsdl_dz_tx_ind_nsaids_treatment_pe: String
  therapy_type: String
  any_therapy: Boolean
  number_of_prior_regimens_any_therapy: Int
  total_number_of_doses_any_therapy: Int
  date_of_last_dose_any_therapy: String
  treatment_performed_at_site: Boolean
  treatment_performed_in_minimal_residual: Boolean
  enrollment: enrollment @relation(name:"at_enrollment", direction:OUT)
  next_prior_therapy: prior_therapy @relation(name:"next", direction:OUT)
  prior_prior_therapy: prior_therapy @relation(name:"next", direction:IN)
}

type program {
  program_name: String
  program_acronym: String
  program_short_description: String
  program_full_description: String
  program_external_url: String
  program_sort_order: Int
  studies: [study] @relation(name:"member_of", direction:IN)
}

type sample {
  sample_id: String
  sample_type: String
  general_sample_pathology: String
  date_of_sample_collection: String
  necropsy_sample: Boolean
  length_of_tumor: Float
  length_of_tumor_unit: String
  length_of_tumor_original: Float
  length_of_tumor_original_unit: String
  width_of_tumor: Float
  width_of_tumor_unit: String
  width_of_tumor_original: Float
  width_of_tumor_original_unit: String
  analysis_area: Float
  analysis_area_unit: String
  analysis_area_original: Float
  analysis_area_original_unit: String
  analysis_area_percentage_tumor: Float
  analysis_area_percentage_stroma: Float
  analysis_area_percentage_glass: Float
  analysis_area_percentage_pigmented_tumor: Float
  total_tissue_area: Float
  total_tissue_area_unit: String
  total_tissue_area_original: Float
  total_tissue_area_original_unit: String
  tumor_tissue_area: Float
  tumor_tissue_area_unit: String
  tumor_tissue_area_original: Float
  tumor_tissue_area_original_unit: String
  non_tumor_tissue_area: Float
  non_tumor_tissue_area_unit: String
  non_tumor_tissue_area_original: Float
  non_tumor_tissue_area_original_unit: String
  percentage_tumor: Float
  percentage_stroma: Float
  comment: String
  case: case @relation(name:"of_case", direction:OUT)
  visit: visit @relation(name:"on_visit", direction:OUT)
  assays: [assay] @relation(name:"of_sample", direction:IN)
  files: [file] @relation(name:"of_sample", direction:IN)
  next_sample: sample @relation(name:"next", direction:OUT)
  prior_sample: sample @relation(name:"next", direction:IN)
}

type study {
  clinical_study_id: String
  clinical_study_designation: String
  clinical_study_name: String
  clinical_study_description: String
  clinical_study_type: String
  date_of_iacuc_approval: String
  dates_of_conduct: String
  study_arms: [study_arm] @relation(name:"member_of", direction:IN)
  program: program @relation(name:"member_of", direction:OUT)
  cases: [case] @relation(name:"member_of", direction:IN)
  cohorts: [cohort] @relation(name:"member_of", direction:IN)
  study_sites: [study_site] @relation(name:"of_study", direction:IN)
  principal_investigators: [principal_investigator] @relation(name:"of_study", direction:IN)
}

type study_arm {
  arm: String
  ctep_treatment_assignment_code: String
  cohorts: [cohort] @relation(name:"member_of", direction:IN)
  study: study @relation(name:"member_of", direction:OUT)
  agents: [agent] @relation(name:"of_study_arm", direction:IN)
}

type study_site {
  site_short_name: String
  veterinary_medical_center: String
  registering_institution: String
  studies: [study] @relation(name:"of_study", direction:OUT)
}

type visit {
  visit_date: String
  visit_number: String
  case: case @relation(name:"of_case", direction:OUT)
  cycle: cycle @relation(name:"of_cycle", direction:OUT)
  agent_administrations: [agent_administration] @relation(name:"on_visit", direction:IN)
  samples: [sample] @relation(name:"on_visit", direction:IN)
  physical_exams: [physical_exam] @relation(name:"on_visit", direction:IN)
  lab_exams: [lab_exam] @relation(name:"on_visit", direction:IN)
  adverse_events: [adverse_event] @relation(name:"on_visit", direction:IN)
  disease_extents: [disease_extent] @relation(name:"on_visit", direction:IN)
  vital_signs: [vital_signs] @relation(name:"on_visit", direction:IN)
  next_visit: visit @relation(name:"next", direction:OUT)
  prior_visit: visit @relation(name:"next", direction:IN)
}

type vital_signs {
  date_of_vital_signs: String
  body_temperature: Float
  body_temperature_unit: String
  body_temperature_original: Float
  body_temperature_original_unit: String
  pulse: Int
  pulse_unit: String
  pulse_original: Int
  pulse_original_unit: String
  respiration_rate: Int
  respiration_rate_unit: String
  respiration_rate_original: Int
  respiration_rate_original_unit: String
  respiration_pattern: String
  systolic_bp: Int
  systolic_bp_unit: String
  systolic_bp_original: Int
  systolic_bp_original_unit: String
  pulse_ox: Float
  pulse_ox_unit: String
  pulse_ox_original: Float
  pulse_ox_original_unit: String
  patient_weight: Float
  patient_weight_unit: String
  patient_weight_original: Float
  patient_weight_original_unit: String
  body_surface_area: Float
  body_surface_area_unit: String
  body_surface_area_original: Float
  body_surface_area_original_unit: String
  modified_ecog: String
  ecg: Boolean
  assessment_timepoint: String
  phase: String
  crf_id: String
  visit: visit @relation(name:"on_visit", direction:OUT)
}

schema {
 query: QueryType
}

type BreedCaseCount {
  breed: String
  cases: Int
}

type CaseDetail {
  patient_id: String
  breed: String
  patient_age_at_enrollment: Float
  sex: String
  disease_term: String
  stage_of_disease: String
}

type StudyCodeCaseCount {
  study_code: String
  cases: Int
}

type DiagnosisCaseCount {
  diagnosis: String
  cases: Int
}

type GenderCaseCount {
  gender: String
  cases: Int
}


type DiseaseSiteCaseCount {
  disease_site: String
  cases: Int
}

type NeuteredStatusCaseCount {
  neutered_status: String
  cases: Int
}

type StageOfDiseaseCaseCount{
  stage_of_disease :String
  cases :Int
}

type StudyOfProgram {
  program_id: String
  clinical_study_id: String
  clinical_study_designation: String
  clinical_study_name: String
  clinical_study_description: String
  clinical_study_type: String
  date_of_iacuc_approval: String
  dates_of_conduct: String
  numberOfCases: Int
  case_ids:[String]
}

type CaseOverview {
  case_id: String
  study_code: String
  study_type: String
  breed: String
  diagnosis: String
  stage_of_disease: String
  age: Float
  sex: String
  neutered_status: String
}


type FilesOfCase{
  parent:String
  file_name: String
  file_type: String
  file_description: String
  file_format: String
  file_size: Float
  md5sum: String
  file_status: String
  uuid: String
  file_locations: String
}



type QueryType {
  "Simple count"
  numberOfStudies: Int @cypher(statement: "MATCH (n:study) RETURN  count (n)")
  numberOfCases: Int @cypher(statement: "MATCH (n:case) RETURN  count (n)")
  numberOfSamples:Int @cypher(statement: "MATCH (n:sample) RETURN  count (n)")
  numberOfFiles: Int @cypher(statement: "MATCH (n:file) RETURN  count (n)")
  numberOfAliquots: Int @cypher(statement: "MATCH (n:aliquot) return count(n)")

  "Count with parameter"
  sampleCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (s:sample)-[*]->(:study {clinical_study_designation: $study_code}) return count(DISTINCT(s))")
  fileCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(:study {clinical_study_designation: $study_code}) return count(distinct(f))")
  aliguotCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(:study {clinical_study_designation: $study_code}) return count(DISTINCT(a))")
  caseCountOfStudy(study_code: String!): Int @cypher(statement: "MATCH (c:case)-[*]->(:study {clinical_study_designation: $study_code}) return count(distinct(c))")
  fileCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(c:case {case_id: $case_id}) return count(DISTINCT(f))")
  aliquotCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(c:case {case_id: $case_id}) return count(DISTINCT(a))")
  sampleCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (s:sample)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(s))")
  fileCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (f:file)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(f))")
  aliguotCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (a:aliquot)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(a))")
  studyCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (s:study)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(s))")
  caseCountOfProgram(program_id: String!): Int @cypher(statement: "MATCH (c:case)-[*]->(:program {program_acronym: $program_id}) return count(DISTINCT(c))")
  sampleCountOfCase(case_id: String!): Int @cypher(statement: "MATCH (c:case {case_id: $case_id})<-[*]-(s:sample) RETURN count(distinct(s))")

  "Count by group"
  caseCountByStudyCode: [StudyCodeCaseCount] @cypher(statement: "MATCH (s:study) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN s.clinical_study_designation AS study_code, count(DISTINCT(c)) AS cases ORDER BY s.clinical_study_designation")
  caseCountByDiagnosis: [DiagnosisCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.disease_term AS diagnosis, count(c) AS cases ORDER BY d.disease_term")
  caseCountByGender: [GenderCaseCount] @cypher(statement: "MATCH (d:demographic)-[:of_case]->(c:case) RETURN d.sex AS gender, count(c) AS cases ORDER BY d.sex")
  caseCountByBreed: [BreedCaseCount] @cypher(statement: "MATCH (c:case)<-[:of_case]-(d:demographic) RETURN d.breed AS breed, count(c) AS cases")
  caseCountByNeuteredStatus :[NeuteredStatusCaseCount] @cypher(statement: " MATCH (c:case)<--(d:demographic) return d.neutered_indicator AS neutered_status, count(c) AS cases ")
  caseCountByStageOfDisease: [StageOfDiseaseCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.stage_of_disease AS stage_of_disease, count(c) AS cases ORDER BY d.stage_of_disease")
  caseCountByDiseaseSite: [DiseaseSiteCaseCount] @cypher(statement: "MATCH (d:diagnosis)-[:of_case]->(c:case) RETURN d.primary_disease_site AS disease_site, count(c) AS cases ORDER BY d.primary_disease_site")

  "Combined info"
  studiesByProgramId(program_id: String!): [StudyOfProgram] @cypher(statement: "MATCH (p:program {program_acronym: $program_id})<-[*]-(s:study) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN p.program_acronym AS program_id, s.clinical_study_id AS clinical_study_id, s.clinical_study_designation AS clinical_study_designation, s.clinical_study_name AS clinical_study_name, s.clinical_study_description AS clinical_study_description, s.clinical_study_type AS clinical_study_type, s.date_of_iacuc_approval AS date_of_iacuc_approval, s.dates_of_conduct AS dates_of_conduct, COUNT(DISTINCT(c)) as numberOfCases ORDER BY clinical_study_designation")
  studiesByProgram: [StudyOfProgram] @cypher(statement:"MATCH (s:study) OPTIONAL MATCH (p:program)<-[*]-(s) OPTIONAL MATCH (s)<-[*]-(c:case) RETURN p.program_acronym AS program_id, s.clinical_study_id AS clinical_study_id, s.clinical_study_designation AS clinical_study_designation, s.clinical_study_name AS clinical_study_name, s.clinical_study_description AS clinical_study_description, s.clinical_study_type AS clinical_study_type, s.date_of_iacuc_approval AS date_of_iacuc_approval, s.dates_of_conduct AS dates_of_conduct, COUNT(DISTINCT(c)) as numberOfCases,COLLECT(DISTINCT(c.case_id)) as case_ids ORDER BY clinical_study_designation")
  filesOfCase(case_id: String!): [FilesOfCase] @cypher(statement: "MATCH (f:file)-[*]->(c:case{case_id: $case_id}) WITH distinct(f) as f MATCH (f)-->(parent) return f.file_status as file_status,f.file_name as file_name ,f.file_type as file_type,f.file_description as file_description,f.file_format as file_format,f.file_size as file_size,f.md5sum as md5sum,f.uuid as uuid,f.file_locations as file_locations, head(labels(parent)) as parent")
  caseOverview(study_codes: [String] = [], breeds: [String] = [], diagnoses: [String] = [], sexes: [String] = []): [CaseOverview] @cypher(statement: "MATCH (s:study) WITH COLLECT(DISTINCT(s.clinical_study_designation)) AS all_studies MATCH (d:demographic) WITH COLLECT(DISTINCT(d.breed)) AS all_breeds, COLLECT(DISTINCT(d.sex)) AS all_sexes, all_studies AS all_studies MATCH (d:diagnosis) WITH COLLECT(DISTINCT(d.disease_term)) AS all_diseases, all_breeds AS all_breeds, all_sexes AS all_sexes, all_studies AS all_studies MATCH (s:study)<-[*]-(c:case)<--(demo:demographic), (c)<--(diag:diagnosis) WHERE s.clinical_study_designation IN CASE $study_codes WHEN [] THEN all_studies ELSE $study_codes END AND demo.breed IN CASE $breeds WHEN [] THEN all_breeds ELSE $breeds END AND diag.disease_term IN CASE $diagnoses WHEN [] THEN all_diseases ELSE $diagnoses END AND demo.sex IN CASE $sexes WHEN [] THEN all_sexes ELSE $sexes END WITH DISTINCT c AS c, s AS s, demo AS demo, diag AS diag RETURN c.case_id AS case_id, s.clinical_study_designation AS study_code, s.clinical_study_type AS study_type, demo.breed AS breed, diag.disease_term AS diagnosis, diag.stage_of_disease AS stage_of_disease, demo.patient_age_at_enrollment AS age, demo.sex AS sex, demo.neutered_indicator AS neutered_status")

  "Find nodes with parameters"
  casesByStudyId(study_id: String!): [case] @cypher(statement: "MATCH (s:study {clinical_study_designation: $study_id})<-[*]-(c:case) return DISTINCT(c)")
  samplesByCaseId(case_id: String!): [sample] @cypher(statement: "MATCH (c:case {case_id: $case_id})<-[*]-(s:sample) RETURN s")
  filesBySampleId(sample_id: String!): [file] @cypher(statement: "MATCH (s:sample {sample_id: $sample_id})<-[*]-(f:file) RETURN f")
  filesOfStudy(study_code: String!): [file] @cypher(statement: "MATCH (f:file)-[*]->(:study {clinical_study_designation: $study_code}) return DISTINCT(f)")
}